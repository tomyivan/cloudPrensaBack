"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var url_path_1 = __importDefault(require("../util/url-path"));
/**
 */
var ShieldInformationBarrierSegmentMembersManager = /** @class */ (function () {
    /**
     * @param {BoxClient} client The Box API Client that is responsible for making calls to the API
     */
    function ShieldInformationBarrierSegmentMembersManager(client) {
        this.client = client;
    }
    /**
     * Get shield information barrier segment member by ID
     *
     * Retrieves a shield information barrier
     * segment member by its ID.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_member_id The ID of the shield information barrier segment Member.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentMember>} A promise resolving to the result or rejecting with an error
     */
    ShieldInformationBarrierSegmentMembersManager.prototype.getById = function (options, callback) {
        var shieldInformationBarrierSegmentMemberId = options.shield_information_barrier_segment_member_id, queryParams = __rest(options, ["shield_information_barrier_segment_member_id"]), apiPath = (0, url_path_1.default)('shield_information_barrier_segment_members', shieldInformationBarrierSegmentMemberId), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);
    };
    /**
     * List shield information barrier segment members
     *
     * Lists shield information barrier segment members
     * based on provided segment IDs.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_id The ID of the shield information barrier segment.
     * @param {string} [options.marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. This requires `usemarker` to be set to `true`.
     * @param {number} [options.limit] The maximum number of items to return per page.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentMembers>} A promise resolving to the result or rejecting with an error
     */
    ShieldInformationBarrierSegmentMembersManager.prototype.getAll = function (options, callback) {
        var queryParams = __rest(options, []), apiPath = (0, url_path_1.default)('shield_information_barrier_segment_members'), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);
    };
    /**
     * Create shield information barrier segment member
     *
     * Creates a new shield information barrier segment member.
     * @param {object} body
     * @param {object} [options] Options for the request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentMember>} A promise resolving to the result or rejecting with an error
     */
    ShieldInformationBarrierSegmentMembersManager.prototype.create = function (body, options, callback) {
        var queryParams = __rest(options, []), apiPath = (0, url_path_1.default)('shield_information_barrier_segment_members'), params = {
            qs: queryParams,
            body: body,
        };
        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);
    };
    /**
     * Delete shield information barrier segment member by ID
     *
     * Deletes a shield information barrier
     * segment member based on provided ID.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_member_id The ID of the shield information barrier segment Member.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<void>} A promise resolving to the result or rejecting with an error
     */
    ShieldInformationBarrierSegmentMembersManager.prototype.deleteById = function (options, callback) {
        var shieldInformationBarrierSegmentMemberId = options.shield_information_barrier_segment_member_id, queryParams = __rest(options, ["shield_information_barrier_segment_member_id"]), apiPath = (0, url_path_1.default)('shield_information_barrier_segment_members', shieldInformationBarrierSegmentMemberId), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);
    };
    return ShieldInformationBarrierSegmentMembersManager;
}());
module.exports = ShieldInformationBarrierSegmentMembersManager;
//# sourceMappingURL=shield-information-barrier-segment-members.generated.js.map