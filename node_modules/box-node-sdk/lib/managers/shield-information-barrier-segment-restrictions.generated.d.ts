import BoxClient from '../box-client';
import * as schemas from '../schemas';
/**
 */
declare class ShieldInformationBarrierSegmentRestrictionsManager {
    client: BoxClient;
    /**
     * @param {BoxClient} client The Box API Client that is responsible for making calls to the API
     */
    constructor(client: BoxClient);
    /**
     * Get shield information barrier segment restriction by ID
     *
     * Retrieves a shield information barrier segment
     * restriction based on provided ID.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_restriction_id The ID of the shield information barrier segment Restriction.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentRestriction>} A promise resolving to the result or rejecting with an error
     */
    getById(options: {
        /**
         * The ID of the shield information barrier segment Restriction.
         */
        readonly shield_information_barrier_segment_restriction_id: string;
    }, callback?: Function): Promise<schemas.ShieldInformationBarrierSegmentRestriction>;
    /**
     * List shield information barrier segment restrictions
     *
     * Lists shield information barrier segment restrictions
     * based on provided segment ID.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_id The ID of the shield information barrier segment.
     * @param {string} [options.marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. This requires `usemarker` to be set to `true`.
     * @param {number} [options.limit] The maximum number of items to return per page.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentRestrictions>} A promise resolving to the result or rejecting with an error
     */
    getAll(options: {
        /**
         * The ID of the shield information barrier segment.
         */
        readonly shield_information_barrier_segment_id: string;
        /**
         * Defines the position marker at which to begin returning results. This is
         * used when paginating using marker-based pagination.
         *
         * This requires `usemarker` to be set to `true`.
         */
        readonly marker?: string;
        /**
         * The maximum number of items to return per page.
         */
        readonly limit?: number;
    }, callback?: Function): Promise<schemas.ShieldInformationBarrierSegmentRestrictions>;
    /**
     * Create shield information barrier segment restriction
     *
     * Creates a shield information barrier
     * segment restriction object.
     * @param {object} body
     * @param {object} [options] Options for the request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.ShieldInformationBarrierSegmentRestriction>} A promise resolving to the result or rejecting with an error
     */
    create(body: object, options?: {}, callback?: Function): Promise<schemas.ShieldInformationBarrierSegmentRestriction>;
    /**
     * Delete shield information barrier segment restriction by ID
     *
     * Delete shield information barrier segment restriction
     * based on provided ID.
     * @param {object} options Options for the request
     * @param {string} options.shield_information_barrier_segment_restriction_id The ID of the shield information barrier segment Restriction.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<void>} A promise resolving to the result or rejecting with an error
     */
    deleteById(options: {
        /**
         * The ID of the shield information barrier segment Restriction.
         */
        readonly shield_information_barrier_segment_restriction_id: string;
    }, callback?: Function): Promise<void>;
}
export = ShieldInformationBarrierSegmentRestrictionsManager;
