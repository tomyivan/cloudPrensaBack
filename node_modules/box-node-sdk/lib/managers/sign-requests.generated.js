"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var url_path_1 = __importDefault(require("../util/url-path"));
/**
 * Simple manager for interacting with all Sign Requests endpoints and actions.
 */
var SignRequestsManager = /** @class */ (function () {
    /**
     * @param {BoxClient} client The Box API Client that is responsible for making calls to the API
     */
    function SignRequestsManager(client) {
        this.client = client;
    }
    /**
     * Get sign request by ID
     *
     * Gets a sign request by ID.
     * @param {object} options Options for the request
     * @param {string} options.sign_request_id The ID of the sign request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.SignRequest>} A promise resolving to the result or rejecting with an error
     */
    SignRequestsManager.prototype.getById = function (options, callback) {
        var signRequestId = options.sign_request_id, queryParams = __rest(options, ["sign_request_id"]), apiPath = (0, url_path_1.default)('sign_requests', signRequestId), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);
    };
    /**
     * List sign requests
     *
     * Gets sign requests created by a user. If the `sign_files` and/or
     * `parent_folder` are deleted, the sign request will not return in the list.
     * @param {object} [options] Options for the request
     * @param {string} [options.marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. This requires `usemarker` to be set to `true`.
     * @param {number} [options.limit] The maximum number of items to return per page.
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.SignRequests>} A promise resolving to the result or rejecting with an error
     */
    SignRequestsManager.prototype.getAll = function (options, callback) {
        var queryParams = __rest(options, []), apiPath = (0, url_path_1.default)('sign_requests'), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);
    };
    /**
     * Create sign request
     *
     * Creates a sign request. This involves preparing a document for signing and
     * sending the sign request to signers.
     * @param {schemas.SignRequestCreateRequest} body
     * @param {object} [options] Options for the request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.SignRequest>} A promise resolving to the result or rejecting with an error
     */
    SignRequestsManager.prototype.create = function (body, options, callback) {
        var queryParams = __rest(options, []), apiPath = (0, url_path_1.default)('sign_requests'), params = {
            qs: queryParams,
            body: body,
        };
        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);
    };
    /**
     * Cancel sign request
     *
     * Cancels a sign request.
     * @param {object} options Options for the request
     * @param {string} options.sign_request_id The ID of the sign request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<schemas.SignRequest>} A promise resolving to the result or rejecting with an error
     */
    SignRequestsManager.prototype.cancelById = function (options, callback) {
        var signRequestId = options.sign_request_id, queryParams = __rest(options, ["sign_request_id"]), apiPath = (0, url_path_1.default)('sign_requests', signRequestId, 'cancel'), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);
    };
    /**
     * Resend sign request
     *
     * Resends a sign request email to all outstanding signers.
     * @param {object} options Options for the request
     * @param {string} options.sign_request_id The ID of the sign request
     * @param {Function} [callback] Passed the result if successful, error otherwise
     * @returns {Promise<void>} A promise resolving to the result or rejecting with an error
     */
    SignRequestsManager.prototype.resendById = function (options, callback) {
        var signRequestId = options.sign_request_id, queryParams = __rest(options, ["sign_request_id"]), apiPath = (0, url_path_1.default)('sign_requests', signRequestId, 'resend'), params = {
            qs: queryParams,
        };
        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);
    };
    return SignRequestsManager;
}());
module.exports = SignRequestsManager;
//# sourceMappingURL=sign-requests.generated.js.map